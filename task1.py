# Напишите приложение, которое будет запрашивать у пользователя следующие данные в произвольном порядке, разделенные пробелом:
# Фамилия Имя Отчество датарождения номертелефона пол

# Форматы данных:
#     фамилия, имя, отчество - строки
#     дата_рождения - строка формата dd.mm.yyyy
#     номер_телефона - целое беззнаковое число без форматирования
#     пол - символ латиницей f или m.

# Приложение должно проверить введенные данные по количеству. Если количество не совпадает с требуемым, вернуть код ошибки, 
# обработать его и показать пользователю сообщение, что он ввел меньше и больше данных, чем требуется.

# Приложение должно попытаться распарсить полученные значения и выделить из них требуемые параметры. Если форматы данных не 
# совпадают, нужно бросить исключение, соответствующее типу проблемы. Можно использовать встроенные типы java и создать свои. 
# Исключение должно быть корректно обработано, пользователю выведено сообщение с информацией, что именно неверно.
# Если всё введено и обработано верно, должен создаться файл с названием, равным фамилии, в него в одну строку должны записаться 
# полученные данные, вида

# <Фамилия><Имя><Отчество><датарождения> <номертелефона><пол>
# Однофамильцы должны записаться в один и тот же файл, в отдельные строки.
# Не забудьте закрыть соединение с файлом.
# При возникновении проблемы с чтением-записью в файл, исключение должно быть корректно обработано, 
# пользователь должен увидеть стектрейс ошибки.


import time


class AccessException(Exception):
    pass


def check_str(str):
    if len(str) < 6:
        return -1
    elif len(str) > 6:
        return -2


def prog():
    str = input("""Введите строку содержащую следующие данные в указанном формате через пробел:
Фамилия (одно слово), Имя (одно слово), Отчество (одно слово), Дата рождения (ДД.ММ.ГГГГ), Номер телефона (например: 1234567890), Пол (m или f):\n """).split()
    
    error = check_str(str)    
    if error == -1:
        print(f"Введено меньше данных чем ожидается.")
        exit()
    elif error == -2:
        print(f"Введено больше данных чем ожидается.")
        exit()

    lname, fname, mname, bday, phone_number, gender = str[0],str[1],str[2],str[3],str[4],str[5]

    if lname.isalpha() is False:
        raise ValueError(f"Введена неверная фамилия. Фамилия должна содержать только буквы. Введенное значение: {lname}")
        
    if fname.isalpha() is False:
        raise ValueError(f"Введено неверное имя. Имя должно содержать только буквы. Введенное значение: {fname}")
        
    if mname.isalpha() is False:
        raise ValueError(f"Введено неверное отчество. Отчество должно содержать только буквы. Введенное значение: {mname}")
    
    try:
        valid_date = time.strptime(bday, '%d.%m.%Y')
    except ValueError:
        print(f"Введено неверное значение даты рождения. Введенное значение: {bday}")

    try:
        pn = int(phone_number)
    except ValueError:
        print(f"Введено неверное значение номера телефона. Введенное значение: {phone_number}")

    if 'm' not in gender:
        if 'f' not in gender:
            print("Вы ввели неверное значение пола")
    return str


def create_file(str):
    try:
        with open(f"{str[0]}.txt", "a", encoding="utf-8") as f:
            f.write(f"<{str[0]}><{str[1]}><{str[2]}><{str[3]}><{str[4]}><{str[5]}>\n")
    except PermissionError:
        raise AccessException(f"Нет доступа к файлу: {str[0]}.txt")


str = prog()
create_file(str)